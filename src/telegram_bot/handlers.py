"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""
import logging
from typing import Optional
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart

from .services import UserService, SubscriptionService, SignalService
from .formatting import (
    START_MESSAGE, ERROR_MESSAGES,
    format_signal_frames, format_signal_history, format_subscriptions
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

def parse_ticker_and_frequency(args: str) -> tuple[Optional[str], Optional[str]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∏–∫–µ—Ä–∞ –∏ —á–∞—Å—Ç–æ—Ç—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    if not args:
        return None, None
    
    parts = args.strip().upper().split()
    raw_ticker = parts[0] if parts else None
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–∫–µ—Ä - —É–±–∏—Ä–∞–µ–º USDT –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ –º—ã –¥–æ–±–∞–≤–∏–º –µ–≥–æ –ø–æ–∑–∂–µ
    ticker = None
    if raw_ticker:
        if raw_ticker.endswith('USDT'):
            ticker = raw_ticker[:-4]  # –£–±–∏—Ä–∞–µ–º USDT
        else:
            ticker = raw_ticker
    
    frequency = None
    
    if len(parts) > 1:
        freq = parts[1].lower()
        if freq in ['15m', '1h']:
            frequency = freq
        else:
            return ticker, 'invalid'
    
    return ticker, frequency

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UserService.get_or_create_user(user_id, username)
    
    await message.answer(START_MESSAGE)

@router.message(Command('signal'))
async def cmd_signal(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /signal - –æ–Ω–ª–∞–π–Ω —Å–∏–≥–Ω–∞–ª –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""
    args = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else ''
    ticker, _ = parse_ticker_and_frequency(args)
    
    if not ticker:
        await message.answer(ERROR_MESSAGES['ticker_required'])
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await message.answer("üîÑ <b>Fetching Data...</b>")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω —Å–∏–≥–Ω–∞–ª
        signal_data = SignalService.get_online_signal(ticker)
        
        if not signal_data:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            await loading_message.edit_text(ERROR_MESSAGES['api_unavailable'])
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        formatted_message = format_signal_frames(signal_data, "API")
        await loading_message.edit_text(formatted_message)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–Ω–ª–∞–π–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {ticker} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /signal {ticker}: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å loading_message –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if 'loading_message' in locals():
                await loading_message.edit_text(ERROR_MESSAGES['api_unavailable'])
            else:
                await message.answer(ERROR_MESSAGES['api_unavailable'])
        except:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(ERROR_MESSAGES['api_unavailable'])

@router.message(Command('last'))
async def cmd_last(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /last - –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –∏–∑ –ë–î"""
    args = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else ''
    ticker, _ = parse_ticker_and_frequency(args)
    
    if not ticker:
        await message.answer(ERROR_MESSAGES['ticker_required'])
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await message.answer("üìä <b>Fetching Data...</b>")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –ë–î
        signal_data = SignalService.get_last_signals_from_db(ticker)
        
        if not signal_data:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            await loading_message.edit_text(
                ERROR_MESSAGES['no_data_in_db'].format(f"{ticker}USDT", ticker)
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        formatted_message = format_signal_frames(signal_data, "DB")
        await loading_message.edit_text(formatted_message)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {ticker} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /last {ticker}: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å loading_message –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if 'loading_message' in locals():
                await loading_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}")
        except:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}")

@router.message(Command('history'))
async def cmd_history(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history - –∏—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    args = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else ''
    ticker, _ = parse_ticker_and_frequency(args)
    
    if not ticker:
        await message.answer(ERROR_MESSAGES['ticker_required'])
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await message.answer("üìú <b>Fetching Data...</b>")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
        history = SignalService.get_signal_history(ticker, limit=10)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        formatted_message = format_signal_history(history, ticker)
        await loading_message.edit_text(formatted_message)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è {ticker} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /history {ticker}: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å loading_message –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if 'loading_message' in locals():
                await loading_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {ticker}")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {ticker}")
        except:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {ticker}")

@router.message(Command('subscribe'))
async def cmd_subscribe(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä"""
    args = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else ''
    ticker, frequency = parse_ticker_and_frequency(args)
    
    if not ticker:
        await message.answer(ERROR_MESSAGES['ticker_required'])
        return
    
    if frequency == 'invalid':
        await message.answer(ERROR_MESSAGES['invalid_frequency'])
        return
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 15m
    if not frequency:
        frequency = '15m'
    
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    UserService.get_or_create_user(user_id, username)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–∫–µ—Ä)
    base_ticker = ticker.upper()
    if base_ticker.endswith('USDT'):
        base_ticker = base_ticker[:-4]  # –£–±–∏—Ä–∞–µ–º USDT –µ—Å–ª–∏ –µ—Å—Ç—å
    
    ticker_pair = f"{base_ticker}USDT"  # –î–æ–±–∞–≤–ª—è–µ–º USDT –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    success = SubscriptionService.subscribe_user(user_id, ticker_pair, frequency)
    
    if success:
        await message.answer(
            ERROR_MESSAGES['subscription_created'].format(ticker_pair, frequency)
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {ticker_pair} —Å —á–∞—Å—Ç–æ—Ç–æ–π {frequency}")
    else:
        await message.answer(ERROR_MESSAGES['subscription_failed'])

@router.message(Command('unsubscribe'))
async def cmd_unsubscribe(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe - –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–∏–∫–µ—Ä–∞"""
    args = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else ''
    ticker, _ = parse_ticker_and_frequency(args)
    
    if not ticker:
        await message.answer(ERROR_MESSAGES['ticker_required'])
        return
    
    user_id = message.from_user.id
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–∫–µ—Ä 
    base_ticker = ticker.upper()
    if base_ticker.endswith('USDT'):
        base_ticker = base_ticker[:-4]  # –£–±–∏—Ä–∞–µ–º USDT –µ—Å–ª–∏ –µ—Å—Ç—å
        
    ticker_pair = f"{base_ticker}USDT"  # –î–æ–±–∞–≤–ª—è–µ–º USDT –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    success = SubscriptionService.unsubscribe_user(user_id, ticker_pair)
    
    if success:
        await message.answer(ERROR_MESSAGES['unsubscribe_success'].format(ticker_pair))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {ticker_pair}")
    else:
        await message.answer(ERROR_MESSAGES['unsubscribe_not_found'].format(ticker_pair))

@router.message(Command('mytickers'))
async def cmd_mytickers(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mytickers - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫"""
    user_id = message.from_user.id
    
    subscriptions = SubscriptionService.get_user_subscriptions(user_id)
    formatted_message = format_subscriptions(subscriptions, user_id)
    
    await message.answer(formatted_message)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

@router.message(Command('test_notification'))
async def cmd_test_notification(message: Message):
    """–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = SubscriptionService.get_user_subscriptions(user_id)
    
    if not subscriptions:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞
    test_sub = subscriptions[0]
    ticker = test_sub['ticker'].replace('USDT', '')  # –£–±–∏—Ä–∞–µ–º USDT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        signal_data = SignalService.get_online_signal(ticker)
        
        if signal_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            from .notifications import NotificationService
            await NotificationService.send_signal_notifications(ticker, signal_data)
            
            await message.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {test_sub['ticker']}")
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è {ticker}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

@router.message(Command('subscribeall'))
async def cmd_subscribeall(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribeall - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ä—ã"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
    await message.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π /subscribe TICKER –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")

@router.message(Command('unsubscribeall'))
async def cmd_unsubscribeall(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribeall - –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é –æ—Ç–ø–∏—Å–∫—É
    await message.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π /unsubscribe TICKER –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ—Ç–ø–∏—Å–æ–∫.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router.message(F.text.startswith('/'))
async def unknown_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)