"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""
import os
from datetime import datetime, timezone
from typing import Dict, List, Any, Optional
import pytz

def get_kyiv_timezone():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∏–µ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
    return pytz.timezone('Europe/Kyiv')

def format_datetime_kyiv(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å datetime –≤ –∫–∏–µ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    if dt.tzinfo is None:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ UTC
        dt = dt.replace(tzinfo=timezone.utc)
    
    kyiv_tz = get_kyiv_timezone()
    local_dt = dt.astimezone(kyiv_tz)
    return local_dt.strftime('%d.%m.%Y %H:%M:%S (Kyiv)')

def format_confidence(confidence: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å confidence —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"""
    conf_str = f"{confidence:.0f}%"
    
    if confidence >= 90:
        conf_str += " ‚ö†Ô∏è"
    elif confidence < 50:
        conf_str += " (—Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª)"
    
    return conf_str

def format_take_profit(tp_list: List[float]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ take profit"""
    if not tp_list:
        return "‚Äî"
    
    if len(tp_list) == 1:
        return f"{tp_list[0]:.4f}"
    
    return ", ".join(f"{tp:.4f}" for tp in tp_list)

def format_price(price: Optional[float]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É"""
    if price is None:
        return "‚Äî"
    return f"{price:.4f}"

def _format_signal_line(frame: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å–∏–≥–Ω–∞–ª–∞"""
    tf = frame['tf']
    direction = frame.get('direction', 'NEUTRAL')
    entry = format_price(frame.get('entry'))
    tp = format_take_profit(frame.get('tp', []))
    sl = format_price(frame.get('sl'))
    confidence = frame.get('confidence', 0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
    if direction in ['LONG', 'SHORT']:
        dir_formatted = f"<b>{direction}</b>"
    else:
        dir_formatted = direction
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º confidence
    conf_formatted = format_confidence(confidence)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
    tf_padded = f"{tf}:"
    if len(tf_padded) < 4:
        tf_padded = tf_padded.ljust(4)
    
    return (f"{tf_padded} {dir_formatted} | "
            f"entry: {entry} | "
            f"tp: {tp} | "
            f"sl: {sl} | "
            f"conf: {conf_formatted}")

def format_signal_frames(signal_data: Dict[str, Any], source_type: str = "API") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    
    Args:
        signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        source_type: "API" –∏–ª–∏ "DB"
    """
    if not signal_data or not signal_data.get('frames'):
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–∏–∫–µ—Ä—É"
    
    pair = signal_data['pair']
    frames = signal_data['frames']
    source = signal_data.get('source', 'Unknown')
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if source_type == "API":
        title = f"<b>{pair}</b> ¬∑ –¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è (–æ–Ω–ª–∞–π–Ω)"
        time_str = format_datetime_kyiv(datetime.now(timezone.utc))
        time_line = f"<code>{time_str}</code>"
    else:
        title = f"<b>{pair}</b> ¬∑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª"
        stored_at = signal_data.get('stored_at')
        if stored_at:
            time_str = format_datetime_kyiv(stored_at)
            time_line = f"<code>as of {time_str}</code>"
        else:
            time_line = "<code>–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</code>"
    
    lines = [title, time_line, ""]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ—Ä–µ–π–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    tf_order = {'15m': 1, '1h': 2, '4h': 3, '1d': 4}
    main_frames = {}
    correction_frames = {}
    
    for frame in frames:
        tf = frame['tf']
        category = frame.get('category', 'main')
        
        if category == 'correction':
            correction_frames[tf] = frame
        else:
            main_frames[tf] = frame
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º MAIN —Å–∏–≥–Ω–∞–ª—ã
    if main_frames:
        lines.append("<b>üéØ MAIN SIGNALS</b>")
        
        for tf in sorted(main_frames.keys(), key=lambda x: tf_order.get(x, 999)):
            frame = main_frames[tf]
            formatted_line = _format_signal_line(frame)
            lines.append(formatted_line)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º CORRECTION —Å–∏–≥–Ω–∞–ª—ã (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    lines.append("")
    lines.append("<b>‚ö° CORRECTION SIGNALS</b>")
    
    if correction_frames:
        for tf in sorted(correction_frames.keys(), key=lambda x: tf_order.get(x, 999)):
            frame = correction_frames[tf]
            formatted_line = _format_signal_line(frame)
            lines.append(formatted_line)
    else:
        lines.append("<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏</i>")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    lines.extend(["", f"<i>–ò—Å—Ç–æ—á–Ω–∏–∫: {source}</i>"])
    
    return "\n".join(lines)

def format_signal_history(history: List[Dict[str, Any]], ticker: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤"""
    if not history:
        return f"‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {ticker}USDT –ø—É—Å—Ç–∞"
    
    lines = [f"üìú –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ {ticker}USDT:", ""]
    
    for signal in history:
        tf = signal['timeframe']
        direction = signal['signal_type']
        entry = format_price(signal.get('entry_price'))
        tp = format_price(signal.get('take_profit'))
        sl = format_price(signal.get('stop_loss'))
        confidence = signal.get('confidence', 0)
        status = signal.get('status', 'unknown')
        created_at = signal['created_at']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status_emoji = {
            'new': 'üÜï –Ω–æ–≤—ã–π',
            'active': '‚è≥ –∞–∫—Ç–∏–≤–µ–Ω',
            'entry_hit': '‚úÖ –≤—Ö–æ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω',
            'tp_hit': 'üéØ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç',
            'sl_hit': '‚ùå —Å—Ç–æ–ø-–ª–æ—Å—Å',
            'closed': 'üìù –∑–∞–∫—Ä—ã—Ç'
        }.get(status, f"‚ùì {status}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = format_datetime_kyiv(created_at)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º confidence
        conf_formatted = format_confidence(confidence)
        
        line = (f"[{tf}] <b>{direction}</b> | "
                f"entry: {entry} | "
                f"tp: {tp} | "
                f"sl: {sl} | "
                f"conf: {conf_formatted} | "
                f"{status_emoji}")
        
        lines.append(line)
        lines.append(f"    <i>{time_str}</i>")
        lines.append("")
    
    return "\n".join(lines)

def format_subscriptions(subscriptions: List[Dict[str, str]], telegram_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not subscriptions:
        return ("üìå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                "/subscribe TICKER [15m|1h] - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä\n"
                "/subscribeall - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ä—ã")
    
    lines = ["üìå –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", ""]
    
    for sub in subscriptions:
        ticker = sub['ticker']
        frequency = sub['frequency']
        created = sub['created_at']
        
        freq_emoji = "üïê" if frequency == '15m' else "üïë"
        lines.append(f"‚Ä¢ {ticker} {freq_emoji} {frequency} <i>(—Å {created})</i>")
    
    lines.extend(["", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:"])
    lines.append("/subscribe TICKER [15m|1h] - –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å")
    lines.append("/unsubscribe TICKER - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è")
    lines.append("/subscribeall - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ")
    lines.append("/unsubscribeall - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö")
    
    return "\n".join(lines)

# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
START_MESSAGE = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ CryptoMaxa.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/signal TICKER - —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª (–æ–Ω–ª–∞–π–Ω, –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î)
/last TICKER - –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–∑ –±–∞–∑—ã
/history TICKER - –∏—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:</b>
/subscribe TICKER [15m|1h] - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä
/unsubscribe TICKER - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–∏–∫–µ—Ä–∞
/mytickers - —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫

<b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
/test_notification - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/signal BTC</code> - —Ç–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –ø–æ BTCUSDT
<code>/last ETH</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –ø–æ ETHUSDT –∏–∑ –±–∞–∑—ã
<code>/subscribe BTC 15m</code> - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ BTC —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

<b>üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã).

<i>–¢–∏–∫–µ—Ä—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –±–µ–∑ USDT (BTC, ETH, AVAX –∏ —Ç.–¥.)</i>"""

ERROR_MESSAGES = {
    'ticker_required': '‚ùå –£–∫–∞–∂–∏ —Ç–∏–∫–µ—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>/signal BTC</code>',
    'api_unavailable': '‚ö†Ô∏è API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /last –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã.',
    'no_data_in_db': '‚ùå –î–ª—è {} –≤ –±–∞–∑–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ. –°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Å—å –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π <code>/signal {}</code> –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.',
    'ticker_not_found': '‚ùå –¢–∏–∫–µ—Ä {} –Ω–µ –Ω–∞–π–¥–µ–Ω.',
    'subscription_exists': '‚úÖ –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {}. –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {}.',
    'subscription_created': '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {} —Å–æ–∑–¥–∞–Ω–∞ —Å —á–∞—Å—Ç–æ—Ç–æ–π {}.',
    'subscription_failed': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
    'unsubscribe_success': '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {} –æ—Ç–º–µ–Ω–µ–Ω–∞.',
    'unsubscribe_not_found': '‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {}.',
    'unsubscribe_failed': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
    'invalid_frequency': '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π 15m –∏–ª–∏ 1h.',
    'rate_limit': '‚è± –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥.',
    'global_limit': 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
}