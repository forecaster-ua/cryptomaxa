"""
Middleware –¥–ª—è Telegram –±–æ—Ç–∞
"""
import time
import logging
from collections import defaultdict
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message

logger = logging.getLogger(__name__)

class LoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        user_id = event.from_user.id if event.from_user else "Unknown"
        username = event.from_user.username if event.from_user else "Unknown"
        text = event.text or "No text"
        
        logger.info(f"Command from user {user_id} (@{username}): {text}")
        
        start_time = time.time()
        try:
            result = await handler(event, data)
            duration = time.time() - start_time
            logger.info(f"Command processed in {duration:.3f}s")
            return result
        except Exception as e:
            duration = time.time() - start_time
            logger.error(f"Command failed after {duration:.3f}s: {e}")
            raise

class RateLimitMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è rate limiting"""
    
    def __init__(self):
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_last_request: Dict[int, float] = {}
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ /signal –∑–∞ –º–∏–Ω—É—Ç—É
        self.global_signal_requests: list = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.user_cooldown = 2.0  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ /signal –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.global_limit = 10    # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ /signal –≤ –º–∏–Ω—É—Ç—É –≥–ª–æ–±–∞–ª—å–Ω–æ
        self.global_window = 60   # –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    def _clean_global_requests(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        now = time.time()
        self.global_signal_requests = [
            req_time for req_time in self.global_signal_requests 
            if now - req_time < self.global_window
        ]
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /signal
        if event.text and event.text.startswith('/signal'):
            user_id = event.from_user.id if event.from_user else 0
            now = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–∏–º–∏—Ç–∞
            if user_id in self.user_last_request:
                time_since_last = now - self.user_last_request[user_id]
                if time_since_last < self.user_cooldown:
                    remaining = self.user_cooldown - time_since_last
                    await event.answer(
                        f"‚è± –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {remaining:.1f} —Å–µ–∫—É–Ω–¥."
                    )
                    return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
            self._clean_global_requests()
            if len(self.global_signal_requests) >= self.global_limit:
                await event.answer(
                    "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ /signal. "
                    "–ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
            self.user_last_request[user_id] = now
            self.global_signal_requests.append(now)
        
        return await handler(event, data)