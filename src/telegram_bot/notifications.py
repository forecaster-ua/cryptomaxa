"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
"""
import asyncio
import logging
from typing import List, Dict, Any
from datetime import datetime

from src.database.connection import db_manager
from src.database.models import User, Subscription, Signal
from src.telegram_bot.formatting import format_signal_frames
from src.telegram_bot.bot import get_bot

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    
    @staticmethod
    async def send_signal_notifications(ticker: str, signals_data: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
        
        Args:
            ticker: –¢–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'AVAX')  
            signals_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –¥–ª—è format_signal_frames
        """
        try:
            db_manager.init_connection()
            
            with db_manager.get_session() as session:
                # –ò—â–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ä
                ticker_pair = f"{ticker}USDT"
                subscriptions = session.query(Subscription).filter_by(
                    ticker=ticker_pair
                ).join(User).all()
                
                if not subscriptions:
                    logger.debug(f"–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ {ticker_pair}")
                    return
                
                logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {len(subscriptions)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ {ticker_pair}")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = format_signal_frames(signals_data, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
                sent_count = 0
                error_count = 0
                
                # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
                bot = get_bot()
                
                for sub in subscriptions:
                    try:
                        await bot.send_message(
                            chat_id=sub.user.telegram_id,
                            text=message_text,
                            parse_mode='HTML'
                        )
                        sent_count += 1
                        logger.debug(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user.telegram_id}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        error_count += 1
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user.telegram_id}: {e}")
                
                logger.info(f"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {ticker_pair}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –æ—à–∏–±–æ–∫ {error_count}")
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ send_signal_notifications –¥–ª—è {ticker}: {e}")
    
    @staticmethod
    async def send_batch_notifications(signals_batch: Dict[str, Dict[str, Any]]):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–∞–∫–µ—Ç—É —Å–∏–≥–Ω–∞–ª–æ–≤ (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤)
        
        Args:
            signals_batch: {ticker: signals_data} –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
        """
        logger.info(f"üì¢ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {len(signals_batch)} —Ç–∏–∫–µ—Ä–æ–≤")
        
        for ticker, signals_data in signals_batch.items():
            if signals_data and signals_data.get('frames'):
                await NotificationService.send_signal_notifications(ticker, signals_data)
                
        logger.info("üì¢ –ü–∞–∫–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    @staticmethod
    def get_subscribers_count() -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            db_manager.init_connection()
            
            with db_manager.get_session() as session:
                # –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫
                total_subs = session.query(Subscription).count()
                
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                unique_users = session.query(User).join(Subscription).distinct().count()
                
                # –¢–æ–ø —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
                top_tickers = session.query(
                    Subscription.ticker, 
                    session.query(Subscription.id).filter_by(ticker=Subscription.ticker).count().label('count')
                ).group_by(Subscription.ticker).order_by(session.text('count DESC')).limit(5).all()
                
                return {
                    'total_subscriptions': total_subs,
                    'unique_users': unique_users,
                    'top_tickers': [{'ticker': t.ticker, 'count': t.count} for t in top_tickers]
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return {
                'total_subscriptions': 0,
                'unique_users': 0,
                'top_tickers': []
            }