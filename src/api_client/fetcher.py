"""
HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import requests
import logging
import time
from typing import Dict, Any, Optional, List
from urllib.parse import urljoin

from ..utils.exceptions import APIError
from ..config import config

logger = logging.getLogger(__name__)

class SignalAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.base_url = config.API_BASE_URL
        self.timeout = config.API_TIMEOUT
        self.timeframes = config.TIMEFRAMES
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.session.headers.update({
            'User-Agent': 'Hydra-Bot/1.0',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        })
    
    def get_multi_signal(self, ticker: str, retries: int = 2) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        
        Args:
            ticker: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'BTC')
            retries: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        Raises:
            APIError: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö API
        """
        pair = f"{ticker}USDT"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        params = [
            ('pair', pair),
            ('lang', 'uk'),
            ('model_type', 'xgb')
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for tf in self.timeframes:
            params.append(('timeframes', tf))
        
        url = f"{self.base_url}/multi_signal"
        
        for attempt in range(retries + 1):
            try:
                logger.debug(f"üì° API –∑–∞–ø—Ä–æ—Å –¥–ª—è {pair}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries + 1}")
                
                response = self.session.get(
                    url,
                    params=params,
                    timeout=self.timeout
                )
                
                logger.debug(f"üì° –û—Ç–≤–µ—Ç API –¥–ª—è {pair}: —Å—Ç–∞—Ç—É—Å {response.status_code}, —Ä–∞–∑–º–µ—Ä {len(response.content)} –±–∞–π—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                response.raise_for_status()
                
                # –ü–∞—Ä—Å–∏–º JSON
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if isinstance(data, list):
                    logger.debug(f"‚úÖ {pair}: –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(data)} —Å–∏–≥–Ω–∞–ª–æ–≤")
                elif isinstance(data, dict):
                    logger.debug(f"‚úÖ {pair}: –ø–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏: {list(data.keys())}")
                else:
                    logger.warning(f"‚ö†Ô∏è  {pair}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(data)}")
                
                return data
                
            except requests.exceptions.Timeout as e:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è {pair} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç API –¥–ª—è {pair}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫...")
                if attempt < retries:
                    time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    continue
                else:
                    logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {pair} (—Ç–∞–π–º–∞—É—Ç—ã)")
                    print(f"‚ùå {pair}: –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã (—Ç–∞–π–º–∞—É—Ç—ã)")
                    return None
                    
            except requests.exceptions.ConnectionError as e:
                logger.warning(f"üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {pair} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                print(f"üîå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API –¥–ª—è {pair}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫...")
                if attempt < retries:
                    time.sleep(2)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞
                    continue
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å API –¥–ª—è {pair}")
                    print(f"‚ùå {pair}: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                    return None
                    
            except requests.exceptions.HTTPError as e:
                status_code = e.response.status_code if e.response else 'unknown'
                response_text = e.response.text[:200] if e.response else '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞'
                
                logger.error(f"üö´ HTTP {status_code} –¥–ª—è {pair}: {response_text}")
                print(f"üö´ {pair}: HTTP {status_code} - {response_text}")
                
                # –ü—Ä–∏ 4xx –æ—à–∏–±–∫–∞—Ö –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if e.response and 400 <= e.response.status_code < 500:
                    return None
                
                # –ü—Ä–∏ 5xx –æ—à–∏–±–∫–∞—Ö –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if attempt < retries:
                    print(f"üîÑ {pair}: –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫ (HTTP {status_code})")
                    time.sleep(3)
                    continue
                else:
                    return None
                    
            except ValueError as e:  # JSON decode error
                logger.error(f"üìÑ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è {pair}: {e}")
                print(f"üìÑ {pair}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç API")
                return None
                
            except Exception as e:
                logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {pair}: {e}")
                print(f"üí• {pair}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {str(e)[:100]}")
                return None
        
        return None
    
    def get_signals_batch(self, tickers: List[str], delay: float = 0.1) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        Args:
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            Dict –≥–¥–µ –∫–ª—é—á - —Ç–∏–∫–µ—Ä, –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–ª–∏ None
        """
        results = {}
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
        
        for i, ticker in enumerate(tickers):
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if i > 0:
                    time.sleep(delay)
                
                result = self.get_multi_signal(ticker)
                results[ticker] = result
                
                if result:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
                    signals_count = len(result) if isinstance(result, list) else "–æ–±—ä–µ–∫—Ç"
                    logger.debug(f"‚úÖ {ticker}: {signals_count} —Å–∏–≥–Ω–∞–ª–æ–≤")
                else:
                    logger.warning(f"‚ùå {ticker}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {ticker}: {e}")
                results[ticker] = None
        
        successful = sum(1 for v in results.values() if v is not None)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {successful}/{len(tickers)}")
        
        return results
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
        self.session.close()