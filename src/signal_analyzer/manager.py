"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API, –ë–î –∏ –∞–Ω–∞–ª–∏–∑–∞
"""
import logging
from typing import Dict, Any, List, Optional

from ..api_client import TickersParser, SignalAPIClient, SignalDataParser
from ..signal_analyzer import SignalProcessor, SignalValidator, ConfidenceAnalyzer
from ..utils.exceptions import APIError, DatabaseError

logger = logging.getLogger(__name__)

class SignalManager:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.tickers_parser = TickersParser()
        self.api_client = SignalAPIClient()
        self.signal_processor = SignalProcessor()
        self.signal_validator = SignalValidator()
        self.confidence_analyzer = ConfidenceAnalyzer()
    
    def fetch_and_process_all_signals(self) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ä–∞–º, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        results = {
            'tickers_total': 0,
            'tickers_processed': 0,
            'api_errors': 0,
            'signals_saved': 0,
            'signals_updated': 0,
            'warnings_found': 0,
            'processing_time': 0
        }
        
        logger.info("=== –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ ===")
        
        from datetime import datetime
        start_time = datetime.utcnow()
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
            tickers = self.tickers_parser.parse_tickers()
            results['tickers_total'] = len(tickers)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
            raw_signals_data = self.api_client.get_signals_batch(tickers, delay=0.1)
            
            # 3. –ü–∞—Ä—Å–∏–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            processed_signals = {}
            total_signals = 0
            ticker_count = 0
            
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤: 0/{len(tickers)}", end="", flush=True)
            
            for ticker, api_data in raw_signals_data.items():
                ticker_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                print(f"\rüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤: {ticker_count}/{len(tickers)} ({ticker})", end="", flush=True)
                
                if api_data is None:
                    results['api_errors'] += 1
                    continue
                
                try:
                    # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª—ã
                    signals = SignalDataParser.parse_signal_response(api_data, ticker)
                    
                    if signals:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º confidence
                        analyzed_signals = self.confidence_analyzer.analyze_confidence_warnings(signals)
                        processed_signals[ticker] = analyzed_signals
                        
                        total_signals += len(signals)
                        results['tickers_processed'] += 1
                        
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                        for signal in analyzed_signals:
                            if signal.get('warnings'):
                                results['warnings_found'] += len(signal['warnings'])
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {ticker}: {e}")
                    results['api_errors'] += 1
            
            print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {results['tickers_processed']} —Ç–∏–∫–µ—Ä–æ–≤")
            
            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if processed_signals:
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î...")
                save_results = self.signal_processor.save_signals_batch(processed_signals)
                
                results['signals_saved'] = save_results['saved_signals']
                results['signals_updated'] = save_results['updated_signals']
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            current_prices = {}
            for ticker, signals in processed_signals.items():
                if signals:
                    # –ë–µ—Ä–µ–º current_price –∏–∑ –ª—é–±–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è —Ç–∏–∫–µ—Ä–∞)
                    current_price = signals[0].get('current_price')
                    if current_price:
                        current_prices[ticker] = current_price
            
            validation_results = self.signal_validator.validate_active_signals(current_prices)
            results.update({
                'entry_hits': validation_results.get('entry_hits', 0),
                'take_profit_hits': validation_results.get('take_profit_hits', 0),
                'stop_loss_hits': validation_results.get('stop_loss_hits', 0)
            })
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            raise
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
            self.api_client.close()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        end_time = datetime.utcnow()
        results['processing_time'] = (end_time - start_time).total_seconds()
        
        logger.info("=== –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω ===")
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {results['signals_saved']} –Ω–æ–≤—ã—Ö, "
                   f"{results['signals_updated']} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        logger.info(f"–ò—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {results['entry_hits']} –≤—Ö–æ–¥–æ–≤, "
                   f"{results['take_profit_hits']} —Ç–µ–π–∫–æ–≤, "
                   f"{results['stop_loss_hits']} —Å—Ç–æ–ø–æ–≤")
        logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results['processing_time']:.1f} —Å–µ–∫")
        
        # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (–¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)
        if processed_signals and (results['signals_saved'] > 0 or results['signals_updated'] > 0):
            try:
                import asyncio
                from ..telegram_bot.notifications import NotificationService
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                notifications_data = {}
                for ticker, signals in processed_signals.items():
                    if signals:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è format_signal_frames
                        signal_data = {
                            'pair': f"{ticker}USDT",
                            'frames': [],
                            'source': "–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"
                        }
                        
                        for signal in signals:
                            frame = {
                                'tf': signal.get('timeframe'),
                                'direction': signal.get('signal_type', '').upper(),
                                'entry': signal.get('entry_price'),
                                'tp': signal.get('take_profit_list', []),
                                'sl': signal.get('stop_loss'),
                                'confidence': signal.get('confidence', 0),
                                'warnings': signal.get('warnings', [])
                            }
                            signal_data['frames'].append(frame)
                        
                        notifications_data[ticker] = signal_data
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {len(notifications_data)} —Ç–∏–∫–µ—Ä–æ–≤")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º event loop, —Ç–∞–∫ –∫–∞–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(NotificationService.send_batch_notifications(notifications_data))
                    results['notifications_sent'] = len(notifications_data)
                finally:
                    loop.close()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                results['notification_errors'] = 1
        
        return results
    
    def process_single_ticker(self, ticker: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        
        Args:
            ticker: –¢–∏–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {ticker}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            api_data = self.api_client.get_multi_signal(ticker)
            
            if not api_data:
                return {'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API'}
            
            # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª—ã
            signals = SignalDataParser.parse_signal_response(api_data, ticker)
            
            if not signals:
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–∏–≥–Ω–∞–ª—ã'}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º confidence
            analyzed_signals = self.confidence_analyzer.analyze_confidence_warnings(signals)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_results = self.signal_processor.save_signals_batch({ticker: analyzed_signals})
            
            return {
                'success': True,
                'signals_count': len(analyzed_signals),
                'saved': save_results['saved_signals'],
                'updated': save_results['updated_signals'],
                'warnings': sum(len(s.get('warnings', [])) for s in analyzed_signals)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {ticker}: {e}")
            return {'success': False, 'error': str(e)}
    
    def get_recent_signals_summary(self, hours: int = 24) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –Ω–µ–¥–∞–≤–Ω–∏–º —Å–∏–≥–Ω–∞–ª–∞–º
        
        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict —Å–æ —Å–≤–æ–¥–∫–æ–π
        """
        from datetime import datetime, timedelta
        from ..database.connection import db_manager
        from ..database.models import Signal
        from sqlalchemy import and_
        
        try:
            with db_manager.session_scope() as session:
                time_threshold = datetime.utcnow() - timedelta(hours=hours)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
                recent_signals = session.query(Signal).filter(
                    Signal.created_at >= time_threshold
                ).all()
                
                if not recent_signals:
                    return {'total_signals': 0}
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                status_counts = {}
                confidence_values = []
                tickers = set()
                
                for signal in recent_signals:
                    status = signal.status
                    status_counts[status] = status_counts.get(status, 0) + 1
                    
                    if signal.confidence:
                        confidence_values.append(float(signal.confidence))
                    
                    tickers.add(signal.ticker)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
                summary = {
                    'total_signals': len(recent_signals),
                    'unique_tickers': len(tickers),
                    'status_breakdown': status_counts,
                    'timeframe': f'{hours}h'
                }
                
                if confidence_values:
                    summary['confidence_stats'] = {
                        'avg': sum(confidence_values) / len(confidence_values),
                        'max': max(confidence_values),
                        'min': min(confidence_values),
                        'high_confidence_count': sum(1 for c in confidence_values if c >= 90)
                    }
                
                return summary
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {'error': str(e)}