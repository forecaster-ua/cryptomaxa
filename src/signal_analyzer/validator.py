"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import logging
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timedelta
from decimal import Decimal

from ..database.connection import db_manager
from ..database.crud import SignalCRUD, ErrorLogCRUD
from ..database.models import Signal

logger = logging.getLogger(__name__)

class SignalValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤"""
    
    def __init__(self):
        self.validation_count = 0
    
    def validate_active_signals(self, current_prices: Dict[str, float] = None) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Args:
            current_prices: –°–ª–æ–≤–∞—Ä—å —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = {
            'checked_signals': 0,
            'entry_hits': 0,
            'take_profit_hits': 0,
            'stop_loss_hits': 0,
            'still_active': 0,
            'errors': 0
        }
        
        logger.info("üéØ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        try:
            with db_manager.session_scope() as session:
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                active_signals = SignalCRUD.get_active_signals(session)
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(active_signals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                
                signal_count = 0
                for signal in active_signals:
                    signal_count += 1
                    
                    if signal_count % 10 == 0 or signal_count == len(active_signals):
                        print(f"\rüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π: {signal_count}/{len(active_signals)}", end="", flush=True)
                    results['checked_signals'] += 1
                    
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é
                        current_price = None
                        if current_prices and signal.ticker in current_prices:
                            current_price = current_prices[signal.ticker]
                        elif signal.current_price:
                            current_price = float(signal.current_price)
                        
                        if current_price is None:
                            logger.warning(f"–ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {signal.ticker}")
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
                        new_status = self._check_signal_execution(signal, current_price)
                        
                        if new_status != signal.status:
                            old_status = signal.status
                            SignalCRUD.update_signal_status(
                                session, signal.id, new_status, current_price
                            )
                            
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                            if new_status == 'entry_hit':
                                results['entry_hits'] += 1
                                logger.info(f"üéØ –í–•–û–î: {signal.ticker} {signal.timeframe} –ø–æ —Ü–µ–Ω–µ {current_price}")
                            elif new_status == 'tp_hit':
                                results['take_profit_hits'] += 1
                                logger.info(f"üéØ –¢–ï–ô–ö: {signal.ticker} {signal.timeframe} –ø–æ —Ü–µ–Ω–µ {current_price}")
                            elif new_status == 'sl_hit':
                                results['stop_loss_hits'] += 1
                                logger.info(f"üéØ –°–¢–û–ü: {signal.ticker} {signal.timeframe} –ø–æ —Ü–µ–Ω–µ {current_price}")
                            
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å {signal.ticker} {signal.timeframe}: "
                                      f"{old_status} ‚Üí {new_status}")
                        else:
                            results['still_active'] += 1
                            
                    except Exception as e:
                        results['errors'] += 1
                        error_msg = f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal.ticker} {signal.id}: {e}"
                        logger.error(error_msg)
                        print(f"\nüí• –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {signal.ticker} - {str(e)[:100]}")
                        ErrorLogCRUD.log_error(session, 'SignalValidator', error_msg)
                
                print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                self.validation_count += results['checked_signals']
                
                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results['entry_hits']} –≤—Ö–æ–¥–æ–≤, "
                           f"{results['take_profit_hits']} —Ç–µ–π–∫–æ–≤, "
                           f"{results['stop_loss_hits']} —Å—Ç–æ–ø–æ–≤")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            results['errors'] += 1
        
        return results
    
    def _check_signal_execution(self, signal: Signal, current_price: float) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal: –û–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –ë–î
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            str: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–∞
        """
        entry_price = float(signal.entry_price)
        signal_type = signal.signal_type.upper()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        take_profit = float(signal.take_profit) if signal.take_profit else None
        stop_loss = float(signal.stop_loss) if signal.stop_loss else None
        
        # –õ–æ–≥–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        if signal.status == 'new':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥
            if self._check_entry_execution(signal_type, current_price, entry_price):
                return 'entry_hit'
            return 'new'
            
        elif signal.status == 'entry_hit' or signal.status == 'active':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–æ–ø–∞ –∏ —Ç–µ–π–∫–∞
            stop_hit = False
            take_hit = False
            
            if stop_loss:
                stop_hit = self._check_stop_loss_execution(signal_type, current_price, stop_loss)
            
            if take_profit:
                take_hit = self._check_take_profit_execution(signal_type, current_price, take_profit)
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if stop_hit:
                return 'sl_hit'
            elif take_hit:
                return 'tp_hit'
            else:
                return 'active'
        
        return signal.status
    
    def _check_entry_execution(self, signal_type: str, current_price: float, entry_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ –¢–ó"""
        if signal_type == 'LONG':
            # LONG: –≤—Ö–æ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ current_price ‚â§ entry
            return current_price <= entry_price
        elif signal_type == 'SHORT':
            # SHORT: –≤—Ö–æ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ current_price ‚â• entry
            return current_price >= entry_price
        return False
    
    def _check_take_profit_execution(self, signal_type: str, current_price: float, take_profit: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
        if signal_type == 'LONG':
            # LONG: —Ç–µ–π–∫ –ø—Ä–∏ price ‚â• take_profit
            return current_price >= take_profit
        elif signal_type == 'SHORT':
            # SHORT: —Ç–µ–π–∫ –ø—Ä–∏ price ‚â§ take_profit  
            return current_price <= take_profit
        return False
    
    def _check_stop_loss_execution(self, signal_type: str, current_price: float, stop_loss: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        if signal_type == 'LONG':
            # LONG: —Å—Ç–æ–ø –ø—Ä–∏ price ‚â§ stop_loss
            return current_price <= stop_loss
        elif signal_type == 'SHORT':
            # SHORT: —Å—Ç–æ–ø –ø—Ä–∏ price ‚â• stop_loss
            return current_price >= stop_loss
        return False

class ConfidenceAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è confidence –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    
    HIGH_CONFIDENCE_THRESHOLD = 90.0
    LOW_CONFIDENCE_THRESHOLD = 50.0
    TREND_ANALYSIS_HOURS = 12
    
    def analyze_confidence_warnings(self, signals: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ confidence
        
        Args:
            signals: –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
        """
        analyzed_signals = []
        
        for signal in signals:
            analyzed_signal = signal.copy()
            warnings = []
            
            confidence = signal.get('confidence')
            if confidence is not None:
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ confidence
                if confidence >= self.HIGH_CONFIDENCE_THRESHOLD:
                    warnings.append({
                        'type': 'high_confidence',
                        'message': f'‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π confidence: {confidence}% (–æ–ø–∞—Å–Ω–æ—Å—Ç—å)',
                        'severity': 'warning'
                    })
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–æ–≥–æ confidence
                elif confidence < self.LOW_CONFIDENCE_THRESHOLD:
                    warnings.append({
                        'type': 'low_confidence', 
                        'message': f'‚ö†Ô∏è –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: {confidence}%',
                        'severity': 'info'
                    })
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞ (—Ç—Ä–µ–±—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
                trend_warning = self._check_trend_conflict(signal)
                if trend_warning:
                    warnings.append(trend_warning)
            
            analyzed_signal['warnings'] = warnings
            analyzed_signals.append(analyzed_signal)
        
        return analyzed_signals
    
    def _check_trend_conflict(self, signal: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ —Å —Ç—Ä–µ–Ω–¥–æ–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        
        –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç—Ä–µ–Ω–¥
        """
        confidence = signal.get('confidence', 0)
        
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –µ—Å–ª–∏ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π confidence –∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç
        if confidence > 95.0:
            return {
                'type': 'potential_trend_conflict',
                'message': '‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞ (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)',
                'severity': 'warning'
            }
        
        return None
    
    def get_confidence_summary(self, signals: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º confidence"""
        if not signals:
            return {}
        
        confidences = [s.get('confidence', 0) for s in signals if s.get('confidence') is not None]
        
        if not confidences:
            return {}
        
        return {
            'avg_confidence': sum(confidences) / len(confidences),
            'max_confidence': max(confidences),
            'min_confidence': min(confidences),
            'high_confidence_count': sum(1 for c in confidences if c >= self.HIGH_CONFIDENCE_THRESHOLD),
            'low_confidence_count': sum(1 for c in confidences if c < self.LOW_CONFIDENCE_THRESHOLD),
            'total_signals': len(confidences)
        }