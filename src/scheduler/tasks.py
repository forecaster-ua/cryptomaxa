"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import schedule
import time
import signal
import threading
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

from ..utils.logger import get_logger
from ..signal_analyzer import SignalManager
from ..database.crud import ErrorLogCRUD
from ..database.connection import db_manager
from ..config import config

logger = get_logger(__name__)

class SignalScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.signal_manager = SignalManager()
        self.is_running = False
        self.shutdown_requested = False
        self.current_job = None
        self.job_thread = None
        self.last_run_time = None
        self.last_run_result = None
        self.total_runs = 0
        self.successful_runs = 0
        self.failed_runs = 0
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        interval_minutes = config.FETCH_INTERVAL_MINUTES
        
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç")
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        schedule.clear()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
        schedule.every(interval_minutes).minutes.do(self._run_signal_processing_job)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –≤—Ä–µ–º–µ–Ω–∞ –∫—Ä–∞—Ç–Ω—ã–µ 15 –º–∏–Ω—É—Ç–∞–º (–∫–∞–∫ –≤ –¢–ó)
        if interval_minutes == 15:
            schedule.every().hour.at(":00").do(self._run_signal_processing_job)
            schedule.every().hour.at(":15").do(self._run_signal_processing_job)
            schedule.every().hour.at(":30").do(self._run_signal_processing_job)
            schedule.every().hour.at(":45").do(self._run_signal_processing_job)
        
        logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        return True
    
    def start(self, run_immediately: bool = True):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        
        Args:
            run_immediately: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        """
        if self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        logger.info("=== –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ===")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if not self.setup_schedule():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return
        
        self.is_running = True
        self.shutdown_requested = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ä–∞–∑—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if run_immediately:
            logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            self._run_signal_processing_job()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        self._print_next_run_time()
        
        try:
            last_countdown_minute = None
            
            while self.is_running and not self.shutdown_requested:
                schedule.run_pending()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                if not (self.job_thread and self.job_thread.is_alive()):
                    self._show_countdown(last_countdown_minute)
                    last_countdown_minute = self._get_minutes_until_next_run()
                
                time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        finally:
            self._cleanup()
        
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        logger.info("–ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        self.shutdown_requested = True
        self.is_running = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
        if self.job_thread and self.job_thread.is_alive():
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏...")
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
            # –ñ–¥–µ–º —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            import time
            max_wait = 240  # 4 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
            waited = 0
            while self.job_thread.is_alive() and waited < max_wait:
                time.sleep(10)
                waited += 10
                if self.job_thread.is_alive():
                    print(f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ... ({waited}—Å/{max_wait}—Å)")
            
            if self.job_thread.is_alive():
                print("‚ö†Ô∏è  –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    
    def force_stop(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è"""
        logger.info("üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        print("üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ!")
        
        self.shutdown_requested = True
        self.is_running = False
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if self.job_thread and self.job_thread.is_alive():
            print("üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑—è—â–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                import threading
                import time
                
                # –î–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                self.job_thread.join(timeout=2)
                
                if self.job_thread.is_alive():
                    print("üíÄ –ü–æ—Ç–æ–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–∏–º–µ–Ω—è–µ–º –∂–µ—Å—Ç–∫–∏–µ –º–µ—Ä—ã...")
                    # –í Python –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —É–±–∏—Ç—å –ø–æ—Ç–æ–∫, 
                    # –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    import os
                    print("üíÄ –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
                    os._exit(1)  # –ñ–µ—Å—Ç–∫–∏–π –≤—ã—Ö–æ–¥
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
                print(f"üíÄ –û—à–∏–±–∫–∞: {e}")
        
        print("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def _run_signal_processing_job(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.job_thread and self.job_thread.is_alive():
            logger.warning("–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.job_thread = threading.Thread(
            target=self._execute_signal_processing,
            name="SignalProcessingThread"
        )
        self.job_thread.start()
    
    def _execute_signal_processing(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        job_start = datetime.utcnow()
        self.last_run_time = job_start
        self.total_runs += 1
        
        print()  # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å—á–µ—Ç—á–∏–∫–∞
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
        logger.info(f"   –í—Ä–µ–º—è: {job_start.strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"   –ó–∞–ø—É—Å–∫ ‚Ññ{self.total_runs}")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
            results = self.signal_manager.fetch_and_process_all_signals()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.last_run_result = {
                'success': True,
                'start_time': job_start,
                'end_time': datetime.utcnow(),
                'duration': results.get('processing_time', 0),
                'results': results
            }
            
            self.successful_runs += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            logger.info("‚úÖ –ü–ª–∞–Ω–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"   üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {results.get('processing_time', 0):.1f} —Å–µ–∫")
            logger.info(f"   üìä –¢–∏–∫–µ—Ä–æ–≤: {results.get('tickers_processed', 0)}/{results.get('tickers_total', 0)}")
            logger.info(f"   üíæ –°–∏–≥–Ω–∞–ª–æ–≤: {results.get('signals_saved', 0)} –Ω–æ–≤—ã—Ö, {results.get('signals_updated', 0)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            logger.info(f"   üéØ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–π: {results.get('entry_hits', 0)} –≤—Ö–æ–¥–æ–≤, {results.get('take_profit_hits', 0)} —Ç–µ–π–∫–æ–≤, {results.get('stop_loss_hits', 0)} —Å—Ç–æ–ø–æ–≤")
            
        except Exception as e:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            self.last_run_result = {
                'success': False,
                'start_time': job_start,
                'end_time': datetime.utcnow(),
                'error': str(e)
            }
            
            self.failed_runs += 1
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
            try:
                with db_manager.session_scope() as session:
                    ErrorLogCRUD.log_error(
                        session, 
                        'SignalScheduler', 
                        f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"
                    )
            except Exception as db_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ –ë–î: {db_error}")
        
        finally:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            self._print_next_run_time()
    
    def _print_next_run_time(self):
        """–í—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        next_run = schedule.next_run()
        if next_run:
            from datetime import timezone
            
            # schedule.next_run() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ, 
            # –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ UTC –≤—Ä–µ–º—è
            now_local = datetime.now()
            now_utc = datetime.utcnow()
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç UTC
            local_utc_offset = now_local - now_utc
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º next_run –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC
            next_run_utc = next_run - local_utc_offset
            
            time_until = next_run_utc - now_utc
            minutes_until = int(time_until.total_seconds() / 60)
            next_run_str = next_run_utc.strftime('%H:%M:%S')
            
            logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_str} UTC (—á–µ—Ä–µ–∑ {minutes_until} –º–∏–Ω)")
    
    def _get_minutes_until_next_run(self) -> Optional[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        next_run = schedule.next_run()
        if next_run:
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC –∫–∞–∫ –≤ _print_next_run_time()
            now_local = datetime.now()
            now_utc = datetime.utcnow()
            local_utc_offset = now_local - now_utc
            next_run_utc = next_run - local_utc_offset
            
            time_until = next_run_utc - now_utc
            return max(0, int(time_until.total_seconds() / 60))
        return None
    
    def _show_countdown(self, last_minute: Optional[int]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        current_minute = self._get_minutes_until_next_run()
        
        if current_minute is not None and current_minute != last_minute:
            if current_minute > 0:
                print(f"\r‚è∞ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞: {current_minute} –º–∏–Ω", end="", flush=True)
            else:
                print(f"\r‚è∞ –ó–∞–ø—É—Å–∫ –±–∞—Ç—á–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...", end="", flush=True)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        signal_name = signal.Signals(signum).name
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        print(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        self.stop()
    
    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        
        # –û—á–∏—â–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.clear()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        if self.job_thread and self.job_thread.is_alive():
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞...")
            print("‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞...")
            self.job_thread.join(timeout=60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        try:
            self.signal_manager.api_client.close()
            print("üîå API –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
        except:
            pass
        
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        status = {
            'is_running': self.is_running,
            'total_runs': self.total_runs,
            'successful_runs': self.successful_runs,
            'failed_runs': self.failed_runs,
            'success_rate': 0.0,
            'last_run_time': None,
            'last_run_success': None,
            'next_run_time': None
        }
        
        if self.total_runs > 0:
            status['success_rate'] = (self.successful_runs / self.total_runs) * 100
        
        if self.last_run_time:
            status['last_run_time'] = self.last_run_time.isoformat()
        
        if self.last_run_result:
            status['last_run_success'] = self.last_run_result.get('success', False)
        
        next_run = schedule.next_run()
        if next_run:
            status['next_run_time'] = next_run.isoformat()
        
        return status
    
    def run_manual(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ä—É—á–Ω—É—é (–Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)"""
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä—É—á–Ω—É—é...")
        
        if self.job_thread and self.job_thread.is_alive():
            return {
                'success': False, 
                'error': '–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞'
            }
        
        try:
            results = self.signal_manager.fetch_and_process_all_signals()
            return {'success': True, 'results': results}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
            return {'success': False, 'error': str(e)}