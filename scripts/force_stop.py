#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import sys
import os
import subprocess
import psutil

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def force_stop_scheduler():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    print("üö® –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    stopped_something = False
    
    try:
        # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å
        try:
            result = subprocess.run(['sudo', 'systemctl', 'is-active', 'hydra-scheduler'], 
                                  capture_output=True, text=True)
            if result.returncode == 0 and result.stdout.strip() == 'active':
                print("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞...")
                subprocess.run(['sudo', 'systemctl', 'kill', '--signal=SIGKILL', 'hydra-scheduler'], 
                             check=True)
                subprocess.run(['sudo', 'systemctl', 'reset-failed', 'hydra-scheduler'], 
                             check=False)
                print("‚úÖ Systemd —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                stopped_something = True
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å: {e}")
        except FileNotFoundError:
            print("‚ÑπÔ∏è  systemctl –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        
        # 2. –ò—â–µ–º –∏ —É–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        processes_killed = 0
        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'username']):
            try:
                if (proc.info['cmdline'] and 
                    any('run_scheduler.py' in cmd for cmd in proc.info['cmdline'])):
                    print(f"üî• –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ PID: {proc.info['pid']} ({proc.info['username']})")
                    proc.kill()
                    processes_killed += 1
                    stopped_something = True
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
        
        if processes_killed > 0:
            print(f"‚úÖ –£–±–∏—Ç–æ {processes_killed} –ø—Ä–æ—Ü–µ—Å—Å(–æ–≤) –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        # 3. –ò—â–µ–º –∏ —É–±–∏–≤–∞–µ–º Python –ø—Ä–æ—Ü–µ—Å—Å—ã —Å API –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        api_processes = 0
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if (proc.info['name'] == 'python' and proc.info['cmdline'] and
                    any('hydrabot-fetcher' in cmd for cmd in proc.info['cmdline'])):
                    print(f"üî• –£–±–∏–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å PID: {proc.info['pid']}")
                    proc.kill()
                    api_processes += 1
                    stopped_something = True
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
        
        if api_processes > 0:
            print(f"‚úÖ –£–±–∏—Ç–æ {api_processes} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å(–æ–≤)")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        import time
        time.sleep(2)
        
        remaining = 0
        for proc in psutil.process_iter(['pid', 'cmdline']):
            try:
                if (proc.info['cmdline'] and 
                    any('run_scheduler.py' in cmd or 'hydrabot-fetcher' in cmd 
                        for cmd in proc.info['cmdline'])):
                    remaining += 1
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if remaining > 0:
            print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {remaining} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        else:
            print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        if stopped_something:
            print("üéâ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ÑπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

if __name__ == "__main__":
    force_stop_scheduler()