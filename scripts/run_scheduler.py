#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import sys
import os
import argparse
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.utils.logger import setup_logging, get_logger
from src.scheduler import SignalScheduler
from src.database.connection import db_manager

def force_stop_scheduler():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —á–µ—Ä–µ–∑ systemctl –∏–ª–∏ PID"""
    import subprocess
    import psutil
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å
        try:
            result = subprocess.run(['sudo', 'systemctl', 'is-active', 'hydra-scheduler'], 
                                  capture_output=True, text=True)
            if result.returncode == 0 and result.stdout.strip() == 'active':
                print("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞...")
                subprocess.run(['sudo', 'systemctl', 'kill', '--signal=SIGKILL', 'hydra-scheduler'], 
                             check=True)
                subprocess.run(['sudo', 'systemctl', 'reset-failed', 'hydra-scheduler'], 
                             check=False)  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                print("‚úÖ Systemd —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
        except subprocess.CalledProcessError:
            pass
        
        # –ï—Å–ª–∏ systemd –Ω–µ –ø–æ–º–æ–≥, –∏—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏
        processes_killed = 0
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if proc.info['cmdline'] and any('run_scheduler.py' in cmd for cmd in proc.info['cmdline']):
                    print(f"üî• –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ PID: {proc.info['pid']}")
                    proc.kill()
                    processes_killed += 1
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if processes_killed > 0:
            print(f"‚úÖ –£–±–∏—Ç–æ {processes_killed} –ø—Ä–æ—Ü–µ—Å—Å(–æ–≤) –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
            return True
        else:
            print("‚ÑπÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤')
    parser.add_argument('--no-immediate', action='store_true', 
                       help='–ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ä–∞–∑—É')
    parser.add_argument('--manual', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –∏ –≤—ã–π—Ç–∏')
    parser.add_argument('--status', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –≤—ã–π—Ç–∏')
    parser.add_argument('--force-stop', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    logger = get_logger(__name__)
    
    logger.info("=" * 60)
    logger.info("üöÄ HYDRA SIGNALS SCHEDULER")
    logger.info("=" * 60)
    from datetime import timezone
    logger.info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} UTC")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not db_manager.init_connection():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return 1
    
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = SignalScheduler()
    
    try:
        if args.force_stop:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            logger.info("üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
            print("üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            result = force_stop_scheduler()
            if result:
                logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                logger.info("‚ÑπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")
                print("‚ÑπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")
            
        elif args.status:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = scheduler.get_status()
            logger.info("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
            logger.info(f"   –ó–∞–ø—É—â–µ–Ω: {status['is_running']}")
            logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {status['total_runs']}")
            logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {status['successful_runs']}")
            logger.info(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {status['failed_runs']}")
            if status['total_runs'] > 0:
                logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {status['success_rate']:.1f}%")
            if status['last_run_time']:
                logger.info(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {status['last_run_time']}")
            if status['next_run_time']:
                logger.info(f"   –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {status['next_run_time']}")
            
        elif args.manual:
            # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
            logger.info("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
            result = scheduler.run_manual()
            
            if result['success']:
                results = result['results']
                logger.info("‚úÖ –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
                logger.info(f"   üìä –¢–∏–∫–µ—Ä–æ–≤: {results.get('tickers_processed', 0)}")
                logger.info(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {results.get('signals_saved', 0)}")
                logger.info(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {results.get('signals_updated', 0)}")
                logger.info(f"   üïê –í—Ä–µ–º—è: {results.get('processing_time', 0):.1f} —Å–µ–∫")
                return 0
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")
                return 1
        
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            run_immediately = not args.no_immediate
            
            logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞")
            logger.info(f"   –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: {'—Å—Ä–∞–∑—É' if run_immediately else '–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é'}")
            logger.info("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            scheduler.start(run_immediately=run_immediately)
            
        return 0
        
    except KeyboardInterrupt:
        logger.info("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        scheduler.stop()
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    finally:
        logger.info("üëã –†–∞–±–æ—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        logger.info("=" * 60)

if __name__ == "__main__":
    sys.exit(main())