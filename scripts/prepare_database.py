#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –ë–î –æ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.database import db_manager, get_db_session
from src.database.models import User, Subscription, Signal, ErrorLog
from sqlalchemy import func
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_database_state():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î ===\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    if not db_manager.init_connection():
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    
    try:
        with get_db_session() as session:
            # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            users_count = session.query(func.count(User.id)).scalar()
            subscriptions_count = session.query(func.count(Subscription.id)).scalar()
            signals_count = session.query(func.count(Signal.id)).scalar()
            errors_count = session.query(func.count(ErrorLog.id)).scalar()
            
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            print(f"üìã –ü–æ–¥–ø–∏—Å–æ–∫: {subscriptions_count}")
            print(f"üìä –°–∏–≥–Ω–∞–ª–æ–≤: {signals_count}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {errors_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
            if users_count > 0:
                print("\nüìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
                users = session.query(User).limit(5).all()
                for user in users:
                    print(f"  - ID: {user.telegram_id}, Username: @{user.username or 'None'}")
            
            if signals_count > 0:
                print("\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:")
                signals = session.query(Signal).order_by(Signal.created_at.desc()).limit(5).all()
                for signal in signals:
                    print(f"  - {signal.ticker} {signal.timeframe} {signal.signal_type} ({signal.created_at})")
            
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        return False

def clean_test_data():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===")
    
    try:
        with get_db_session() as session:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 123456789 –∏–∑ —Ç–µ—Å—Ç–æ–≤)
            test_user = session.query(User).filter_by(telegram_id=123456789).first()
            if test_user:
                print("üßπ –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏...")
                session.delete(test_user)
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
            old_errors = session.query(ErrorLog).count()
            if old_errors > 100:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 100 –æ—à–∏–±–æ–∫, –æ—á–∏—â–∞–µ–º
                print(f"üßπ –û—á–∏—â–∞–µ–º {old_errors} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö...")
                session.query(ErrorLog).delete()
            
            session.commit()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫ –∑–∞–ø—É—Å–∫—É")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if not check_database_state():
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –æ—á–∏—Å—Ç–∫–µ
    with get_db_session() as session:
        users_count = session.query(func.count(User.id)).scalar()
        signals_count = session.query(func.count(Signal.id)).scalar()
    
    if users_count > 0 or signals_count > 0:
        print(f"\nü§î –í –ë–î –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
        print(f"   –°–∏–≥–Ω–∞–ª—ã: {signals_count}")
        print("\n–ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Ö —Å—Ç–æ–∏—Ç –æ—á–∏—Å—Ç–∏—Ç—å.")
        print("–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É.")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        clean_test_data()
    else:
        print("\n‚úÖ –ë–î –ø—É—Å—Ç–∞, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n=== –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î ===")
    check_database_state()
    
    print(f"\nüéØ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.")

if __name__ == '__main__':
    main()